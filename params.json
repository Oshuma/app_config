{"name":"AppConfig","tagline":"Simple Ruby framework-agnostic application configuration.","body":"## Usage\r\n\r\nUsage is simple.  Just pass either a hash of options, or a block, to `AppConfig.setup!`.\r\n\r\nIn it's simplest form, you can use it like so:\r\n\r\n```ruby\r\nAppConfig.setup!(admin_email: 'admin@example.com')\r\n# ..or..\r\nAppConfig.setup! do |config|\r\n  config.admin_email = 'admin@example.com'\r\nend\r\n\r\nAppConfig.admin_email  # => 'admin@example.com'\r\n```\r\n\r\nYou may also specify the storage method along with options specific to that storage method.\r\nCheck the [wiki](https://github.com/Oshuma/app_config/wiki) for more usage examples.\r\n\r\n\r\n## YAML\r\n\r\nGiven this YAML file:\r\n\r\n```yaml\r\n---\r\nadmin_email: 'admin@example.com'\r\napi_name:    'Supr Webz 2.0'\r\napi_key:     'SUPERAWESOMESERVICE'\r\n```\r\n\r\nUse it like so:\r\n\r\n```ruby\r\nAppConfig.setup!(yaml: '/path/to/app_config.yml')\r\n\r\n# Later on...\r\nAppConfig.admin_email  # => 'admin@example.com'\r\nAppConfig.api_name     # => 'Supr Webz 2.0'\r\nAppConfig.api_key      # => 'SUPERAWESOMESERVICE'\r\n```\r\n\r\n\r\n## Mongo\r\n\r\nYou can pass a `:mongo` options hash to `AppConfig.setup!` which should contain\r\nconfiguration values for a Mongo database.  Check the `AppConfig::Storage::Mongo::DEFAULTS`\r\nconstant for the default Mongo connection options.\r\n\r\n```ruby\r\n# These are the defaults.\r\nmongo_opts = {\r\n  host:       'localhost',\r\n  database:   'app_config',\r\n  collection: 'app_config'\r\n}\r\n\r\nAppConfig.setup!(mongo: mongo_opts)\r\n\r\nAppConfig.admin_email  # => 'admin@example.com'\r\n\r\n# Override an existing value and save to the database:\r\nAppConfig.admin_email = 'other_admin@example.com'\r\nAppConfig.save!\r\n```\r\n\r\nThe values are read/saved (by default) to the `app_config` database and\r\n`app_config` collection.  These defaults can be overridden, however, which\r\nmight lend well to versioned configurations; collection names such as\r\n`app_config_v1`, `app_config_v2`, etc.\r\n\r\n```ruby\r\nAppConfig.setup!(mongo: { collection: 'app_config_v2' })\r\n```\r\n\r\n\r\n## PostgreSQL\r\n\r\nUsing PostgreSQL is similar to a Mongo setup.\r\nThe only current requirement is that the table have a primary key named `id`.\r\nAll other columns are used as configuration keys.\r\n\r\n**Note:** The database and schema must exist prior to calling `AppConfig.setup!`.\r\n\r\nGiven this schema:\r\n\r\n```sql\r\nCREATE TABLE app_config (\r\n  id bigserial NOT NULL PRIMARY KEY,\r\n  admin_email character varying(255) DEFAULT 'admin@example.com'::character varying,\r\n  api_key character varying(255) DEFAULT 'SOME_API_KEY'::character varying\r\n);\r\n```\r\n\r\nSetup AppConfig:\r\n\r\n```ruby\r\n# These are the defaults.\r\npostgres_opts = {\r\n  host:     'localhost',\r\n  port:     5432,\r\n  dbname:   'app_config',\r\n  table:    'app_config',\r\n\r\n  # If these are nil (or omitted), the PostgreSQL defaults will be used.\r\n  user:     nil,\r\n  password: nil,\r\n}\r\n\r\nAppConfig.setup!(postgres: postgres_opts)\r\n\r\nAppConfig.admin_email  # => 'admin@example.com'\r\n\r\n# Override an existing value and save to the database:\r\nAppConfig.admin_email = 'another_admin@example.com'\r\nAppConfig.save!\r\n```\r\n\r\n\r\n## Using Storage Defaults\r\n\r\nAll storage options accept `true` as a value, which uses the default options for that storage.\r\n\r\nFor example, to use the [Mongo](https://github.com/Oshuma/app_config/blob/master/lib/app_config/storage/mongo.rb#L9) defaults:\r\n\r\n```ruby\r\nAppConfig.setup!(mongo: true)\r\n```\r\n\r\n### Storage Defaults\r\n\r\n* [Mongo](https://github.com/Oshuma/app_config/blob/master/lib/app_config/storage/mongo.rb#L9)\r\n* [Postgres](https://github.com/Oshuma/app_config/blob/master/lib/app_config/storage/postgres.rb#L8)\r\n* [YAML](https://github.com/Oshuma/app_config/blob/master/lib/app_config/storage/yaml.rb#L9)\r\n\r\n\r\n## Deprecation Note\r\n\r\nVersion `2.x` is **not** backwards compatible with the `1.x` branch.\r\n\r\nSee the [wiki](https://github.com/Oshuma/app_config/wiki) for current usage instructions.","google":"UA-19817598-1","note":"Don't delete this file! It's used internally to help with page regeneration."}