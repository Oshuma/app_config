{"name":"AppConfig","tagline":"Simple Ruby framework-agnostic application configuration.","body":"# AppConfig [![Build Status](https://travis-ci.org/Oshuma/app_config.png?branch=master)](https://travis-ci.org/Oshuma/app_config) [![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=3N885MZB7QCY6&lc=US&item_name=Dale%20Campbell&item_number=app_config&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted)\r\n\r\nAn easy to use, customizable library to easily store and retrieve application\r\nconfiguration; basically anything in 'key/value' pairs.\r\n\r\nAppConfig requires at least Ruby 1.9.\r\n\r\n\r\n## Usage\r\n\r\nUsage is simple.  Just pass either a hash of options, or a block, to `AppConfig.setup!`.\r\n\r\nIn it's simplest form, you can use it like so:\r\n\r\n```ruby\r\nAppConfig.setup!(admin_email: 'admin@example.com')\r\n# ..or..\r\nAppConfig.setup! do |config|\r\n  config.admin_email = 'admin@example.com'\r\nend\r\n\r\nAppConfig.admin_email  # => 'admin@example.com'\r\n```\r\n\r\nAppConfig also supports many different 'storage methods', such as YAML and MongoDB,\r\nallowing you to tailor AppConfig to many different use cases.  For example,\r\nstoring your configuration in the same database as your development/production environment.\r\n\r\n\r\n## YAML\r\n\r\nGiven this YAML file:\r\n\r\n```yaml\r\n---\r\nadmin_email: 'admin@example.com'\r\napi_name:    'Supr Webz 2.0'\r\napi_key:     'SUPERAWESOMESERVICE'\r\n```\r\n\r\nUse it like so:\r\n\r\n```ruby\r\nAppConfig.setup!(yaml: '/path/to/app_config.yml')\r\n\r\n# Later on...\r\nAppConfig.admin_email  # => 'admin@example.com'\r\nAppConfig.api_name     # => 'Supr Webz 2.0'\r\nAppConfig.api_key      # => 'SUPERAWESOMESERVICE'\r\n```\r\n\r\n\r\n## Mongo\r\n\r\nYou can pass a `:mongo` options hash to `AppConfig.setup!` which should contain\r\nconfiguration values for a Mongo database.  Check the `AppConfig::Storage::Mongo::DEFAULTS`\r\nconstant for the default Mongo connection options.\r\n\r\nThe '[mongo](https://rubygems.org/gems/mongo)' gem is required in order to use Mongo storage.\r\n\r\n```ruby\r\n# These are the defaults.\r\nmongo_opts = {\r\n  host:       'localhost',\r\n  database:   'app_config',\r\n  collection: 'app_config'\r\n}\r\n\r\nAppConfig.setup!(mongo: mongo_opts)\r\n\r\nAppConfig.admin_email  # => 'admin@example.com'\r\n\r\n# Override an existing value and save to the database:\r\nAppConfig.admin_email = 'other_admin@example.com'\r\nAppConfig.save!\r\n```\r\n\r\nThe values are read/saved (by default) to the `app_config` database and\r\n`app_config` collection.  These defaults can be overridden, however, which\r\nmight lend well to versioned configurations; collection names such as\r\n`app_config_v1`, `app_config_v2`, etc.\r\n\r\n```ruby\r\nAppConfig.setup!(mongo: { collection: 'app_config_v2' })\r\n```\r\n\r\n\r\n## PostgreSQL\r\n\r\nUsing PostgreSQL is similar to a Mongo setup.\r\nThe only current requirement is that the table have a primary key named `id`.\r\nAll other columns are used as configuration keys.\r\n\r\nThe '[pg](https://rubygems.org/gems/pg)' gem is required in order to use Postgres storage.\r\n\r\n**Note:** The database and schema must exist prior to calling `AppConfig.setup!`.\r\n\r\nGiven this schema:\r\n\r\n```sql\r\nCREATE TABLE app_config (\r\n  id bigserial NOT NULL PRIMARY KEY,\r\n  admin_email character varying(255) DEFAULT 'admin@example.com'::character varying,\r\n  api_key character varying(255) DEFAULT 'SOME_API_KEY'::character varying\r\n);\r\n```\r\n\r\nSetup AppConfig:\r\n\r\n```ruby\r\n# These are the defaults.\r\npostgres_opts = {\r\n  host:     'localhost',\r\n  port:     5432,\r\n  dbname:   'app_config',\r\n  table:    'app_config',\r\n\r\n  # If these are nil (or omitted), the PostgreSQL defaults will be used.\r\n  user:     nil,\r\n  password: nil,\r\n}\r\n\r\nAppConfig.setup!(postgres: postgres_opts)\r\n\r\nAppConfig.admin_email  # => 'admin@example.com'\r\n\r\n# Override an existing value and save to the database:\r\nAppConfig.admin_email = 'another_admin@example.com'\r\nAppConfig.save!\r\n```\r\n\r\n\r\n## MySQL\r\n\r\nUsing MySQL is similar to Postgres, including the required primary key named `id`.\r\nAll other columns are used as configuration keys.\r\n\r\nThe '[mysql2](https://rubygems.org/gems/mysql2)' gem is required in order to use MySQL storage.\r\n\r\n**Note:** The database and schema must exist prior to calling `AppConfig.setup!`.\r\n\r\nGiven this schema:\r\n\r\n```sql\r\nCREATE TABLE app_config (\r\n id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n admin_email VARCHAR(255) DEFAULT \"admin@example.com\",\r\n api_key VARCHAR(255) DEFAULT \"SOME_API_KEY\",\r\n true_option BOOLEAN DEFAULT true,\r\n false_option BOOLEAN DEFAULT false\r\n);\r\n```\r\n\r\nSetup AppConfig:\r\n\r\n```ruby\r\n# These are the defaults:\r\nmysql_opts = {\r\n  host: 'localhost',\r\n  port: 3306,\r\n  database: 'app_config',\r\n  table: 'app_config',\r\n  username: nil,\r\n  password: nil,\r\n}\r\n\r\nAppConfig.setup!(mysql: mysql_opts)\r\n\r\nAppConfig.admin_email  # => 'admin@example.com'\r\n\r\n# Update an existing value and save changes:\r\nAppConfig.admin_email = 'another_admin@example.com'\r\nAppConfig.save!\r\n```\r\n\r\n\r\n## SQLite\r\n\r\nSQLite storage works the same as the other SQL storage methods, including the mandatory\r\nprimary key `id` column.\r\n\r\nThe '[sqlite3](https://rubygems.org/gems/sqlite3)' gem is required in order to use SQLite storage.\r\n\r\n**Note:** The database schema must exist prior to calling `AppConfig.setup!`.\r\n\r\n```ruby\r\n# These are the defaults:\r\nsqlite_opts = {\r\n  database: File.join(Dir.home, '.app_config.sqlite3'),\r\n  table: 'app_config',\r\n}\r\n\r\nAppConfig.setup!(sqlite: sqlite_opts)\r\n```\r\n\r\n\r\n## Using Storage Defaults\r\n\r\nAll storage options accept `true` as a value, which uses the default options for that storage.\r\n\r\nFor example, to use the [Mongo](lib/app_config/storage/mongo.rb#L9) defaults:\r\n\r\n```ruby\r\nAppConfig.setup!(mongo: true)\r\n```\r\n\r\n### Storage Defaults\r\n\r\n* [Mongo](lib/app_config/storage/mongo.rb#L9)\r\n* [MySQL](lib/app_config/storage/mysql.rb#L8)\r\n* [Postgres](lib/app_config/storage/postgres.rb#L8)\r\n* [SQLite](lib/app_config/storage/sqlite.rb#L9)\r\n* [YAML](lib/app_config/storage/yaml.rb#L9)\r\n\r\n\r\n### Environment Mode\r\n\r\nThe YAML storage method provides an `:env` option where you can organize the config like Rails `database.yml`:\r\n\r\n```yaml\r\n# Rails.root/config/app_config.yml\r\ndevelopment:\r\n  title: 'Development Mode'\r\n\r\nproduction:\r\n  title: 'Production Mode'\r\n```\r\n\r\nPass a string or symbol to the `:env` option.\r\n\r\n```ruby\r\n# Rails.root/config/initializers/app_config.rb\r\nAppConfig.setup!({\r\n  yaml: \"#{Rails.root}/config/app_config.yml\",\r\n  env: Rails.env\r\n})\r\n\r\n# Uses the given environment section of the config.\r\nAppConfig.title  # => 'Production Mode'\r\n```\r\n\r\n\r\n## Deprecation Note\r\n\r\nVersion `2.x` is **not** backwards compatible with the `1.x` branch.\r\n\r\nSee the [wiki](https://github.com/Oshuma/app_config/wiki) for current usage instructions.\r\n","google":"UA-19817598-1","note":"Don't delete this file! It's used internally to help with page regeneration."}